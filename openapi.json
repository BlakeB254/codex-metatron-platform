{
  "openapi": "3.0.0",
  "info": {
    "title": "Codex Metatron Platform API",
    "description": "Comprehensive API for the Codex Metatron multi-tenant platform supporting administrative operations, tenant management, service orchestration, and application lifecycle management.",
    "version": "1.0.0",
    "contact": {
      "name": "Codex Metatron Team",
      "email": "support@codexmetatron.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Development server"
    },
    {
      "url": "https://api.codexmetatron.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication and authorization endpoints"
    },
    {
      "name": "Tenants",
      "description": "Multi-tenant management operations"
    },
    {
      "name": "Services",
      "description": "Microservice registry and health monitoring"
    },
    {
      "name": "Admin",
      "description": "Administrative operations and system management"
    },
    {
      "name": "Applications",
      "description": "Application lifecycle management"
    },
    {
      "name": "Clients",
      "description": "Client organization management"
    },
    {
      "name": "Health",
      "description": "System health and monitoring endpoints"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Get system health status",
        "description": "Returns basic health information about the server",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/health/detailed": {
      "get": {
        "tags": ["Health"],
        "summary": "Get detailed health status",
        "description": "Returns comprehensive health checks for all system components",
        "operationId": "getDetailedHealth",
        "responses": {
          "200": {
            "description": "Detailed health information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedHealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/health/services": {
      "get": {
        "tags": ["Health"],
        "summary": "Get all services health status",
        "description": "Returns health status for all registered microservices",
        "operationId": "getServicesHealth",
        "responses": {
          "200": {
            "description": "Services health information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesHealthStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login to the platform",
        "description": "Authenticate using username and password to receive a JWT token",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Verify authentication token",
        "description": "Validates the provided JWT token and returns user information",
        "operationId": "verifyToken",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user information",
        "description": "Returns the authenticated user's profile information",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Change user password",
        "description": "Allows authenticated users to change their password",
        "operationId": "changePassword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout from the platform",
        "description": "Invalidates the current session (client-side token removal)",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants": {
      "get": {
        "tags": ["Tenants"],
        "summary": "List all tenants",
        "description": "Retrieves a paginated list of all tenants with optional filtering",
        "operationId": "listTenants",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for tenant name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by tenant status",
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "suspended", "cancelled"]
            }
          },
          {
            "name": "tier",
            "in": "query",
            "description": "Filter by subscription tier",
            "schema": {
              "type": "string",
              "enum": ["free", "basic", "pro", "enterprise"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tenants retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tenants"],
        "summary": "Create a new tenant",
        "description": "Creates a new tenant organization (requires superadmin role)",
        "operationId": "createTenant",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{id}": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Get tenant by ID",
        "description": "Retrieves detailed information about a specific tenant",
        "operationId": "getTenant",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tenant ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDetailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tenants"],
        "summary": "Update tenant",
        "description": "Updates tenant information (requires superadmin role)",
        "operationId": "updateTenant",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tenant ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tenants"],
        "summary": "Delete tenant",
        "description": "Soft deletes a tenant (sets status to cancelled, requires superadmin role)",
        "operationId": "deleteTenant",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tenant ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{id}/regenerate-key": {
      "post": {
        "tags": ["Tenants"],
        "summary": "Regenerate tenant API key",
        "description": "Generates a new API key for the tenant (requires superadmin role)",
        "operationId": "regenerateTenantKey",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tenant ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key regenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/{id}/stats": {
      "get": {
        "tags": ["Tenants"],
        "summary": "Get tenant statistics",
        "description": "Retrieves usage statistics for a specific tenant",
        "operationId": "getTenantStats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Tenant ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services": {
      "get": {
        "tags": ["Services"],
        "summary": "List all services",
        "description": "Retrieves a list of all registered microservices",
        "operationId": "listServices",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of services retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/health": {
      "get": {
        "tags": ["Services"],
        "summary": "Get services health status",
        "description": "Retrieves health status for all registered services",
        "operationId": "getServicesHealthStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Services health status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceHealth"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/sync": {
      "post": {
        "tags": ["Services"],
        "summary": "Synchronize services",
        "description": "Triggers synchronization of service registry",
        "operationId": "syncServices",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Services synchronized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/health/check": {
      "post": {
        "tags": ["Services"],
        "summary": "Perform health check",
        "description": "Performs health check on all registered services",
        "operationId": "checkServicesHealth",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Health check completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/register": {
      "post": {
        "tags": ["Services"],
        "summary": "Register a new service",
        "description": "Registers a new microservice with the service registry",
        "operationId": "registerService",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceName}": {
      "get": {
        "tags": ["Services"],
        "summary": "Get service health",
        "description": "Retrieves health status for a specific service",
        "operationId": "getServiceHealth",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "serviceName",
            "in": "path",
            "required": true,
            "description": "Service name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service health retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHealth"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Services"],
        "summary": "Update service",
        "description": "Updates service registration information",
        "operationId": "updateService",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "serviceName",
            "in": "path",
            "required": true,
            "description": "Service name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Services"],
        "summary": "Unregister service",
        "description": "Removes a service from the registry",
        "operationId": "deleteService",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "serviceName",
            "in": "path",
            "required": true,
            "description": "Service name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service unregistered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/stats": {
      "get": {
        "tags": ["Services"],
        "summary": "Get services statistics",
        "description": "Retrieves performance and error statistics for all services",
        "operationId": "getServicesStats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Services statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/dashboard/stats": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get dashboard statistics",
        "description": "Retrieves comprehensive dashboard statistics",
        "operationId": "getDashboardStats",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "description": "Time period for statistics",
            "schema": {
              "type": "string",
              "enum": ["day", "week", "month"],
              "default": "day"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/notifications": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get admin notifications",
        "description": "Retrieves notifications for the authenticated admin",
        "operationId": "getNotifications",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "unread_only",
            "in": "query",
            "description": "Filter to show only unread notifications",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of notifications to return",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of notifications to skip",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/notifications/{id}/read": {
      "put": {
        "tags": ["Admin"],
        "summary": "Mark notification as read",
        "description": "Marks a specific notification as read",
        "operationId": "markNotificationRead",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Notification ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/activity": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get activity log",
        "description": "Retrieves system activity log",
        "operationId": "getActivityLog",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of activities to return",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of activities to skip",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "tenant_id",
            "in": "query",
            "description": "Filter by tenant ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity log retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLogResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/system/config": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get system configuration",
        "description": "Retrieves system configuration (requires superadmin)",
        "operationId": "getSystemConfig",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "System configuration retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfigResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Admin"],
        "summary": "Update system configuration",
        "description": "Updates system configuration (requires superadmin)",
        "operationId": "updateSystemConfig",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "System configuration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admins": {
      "get": {
        "tags": ["Admin"],
        "summary": "List all admins",
        "description": "Retrieves a paginated list of all admin users (requires superadmin)",
        "operationId": "listAdmins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for admin name or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by admin role",
            "schema": {
              "type": "string",
              "enum": ["superadmin", "admin"]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by admin status",
            "schema": {
              "type": "string",
              "enum": ["active", "suspended"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of admins retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Admin"],
        "summary": "Create a new admin",
        "description": "Creates a new admin user (requires superadmin)",
        "operationId": "createAdmin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdminRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admins/{id}": {
      "get": {
        "tags": ["Admin"],
        "summary": "Get admin by ID",
        "description": "Retrieves detailed information about a specific admin (requires superadmin)",
        "operationId": "getAdmin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminDetailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Admin"],
        "summary": "Update admin",
        "description": "Updates admin information (requires superadmin)",
        "operationId": "updateAdmin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAdminRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Admin"],
        "summary": "Delete admin",
        "description": "Soft deletes an admin user (requires superadmin)",
        "operationId": "deleteAdmin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admins/{id}/suspend": {
      "post": {
        "tags": ["Admin"],
        "summary": "Suspend admin",
        "description": "Suspends an admin user account (requires superadmin)",
        "operationId": "suspendAdmin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin suspended successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admins/{id}/activate": {
      "post": {
        "tags": ["Admin"],
        "summary": "Activate admin",
        "description": "Activates a suspended admin account (requires superadmin)",
        "operationId": "activateAdmin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/admins/{id}/resend-credentials": {
      "post": {
        "tags": ["Admin"],
        "summary": "Resend admin credentials",
        "description": "Resends login credentials to admin's email (requires superadmin)",
        "operationId": "resendAdminCredentials",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications": {
      "get": {
        "tags": ["Applications"],
        "summary": "List all applications",
        "description": "Retrieves a list of all applications",
        "operationId": "listApplications",
        "responses": {
          "200": {
            "description": "List of applications retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applications"],
        "summary": "Create a new application",
        "description": "Creates a new application entry",
        "operationId": "createApplication",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Application created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{id}": {
      "get": {
        "tags": ["Applications"],
        "summary": "Get application by ID",
        "description": "Retrieves detailed information about a specific application",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Application ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Applications"],
        "summary": "Update application",
        "description": "Updates application information",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Application ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Application updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Applications"],
        "summary": "Delete application",
        "description": "Deletes an application",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Application ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clients": {
      "get": {
        "tags": ["Clients"],
        "summary": "List all clients",
        "description": "Retrieves a list of all client organizations",
        "operationId": "listClients",
        "responses": {
          "200": {
            "description": "List of clients retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Clients"],
        "summary": "Create a new client",
        "description": "Creates a new client organization",
        "operationId": "createClient",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/{id}": {
      "get": {
        "tags": ["Clients"],
        "summary": "Get client by ID",
        "description": "Retrieves detailed information about a specific client",
        "operationId": "getClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Clients"],
        "summary": "Update client",
        "description": "Updates client information",
        "operationId": "updateClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Clients"],
        "summary": "Delete client",
        "description": "Deletes a client organization",
        "operationId": "deleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Client ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication token obtained from login endpoint"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "code": {
            "type": "string",
            "description": "Error code for programmatic handling"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the error occurred"
          },
          "requestId": {
            "type": "string",
            "description": "Unique request identifier for debugging"
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "description": "Items per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page"
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there is a previous page"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username or email address"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "format": "password"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "token": {
            "type": "string",
            "description": "JWT authentication token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "VerifyResponse": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Whether the token is valid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "role": {
            "type": "string",
            "enum": ["superadmin", "admin"],
            "description": "User role"
          },
          "tenant_access": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Tenant IDs the user has access to"
          },
          "permissions": {
            "type": "object",
            "description": "User permissions object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the user was created"
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "required": ["currentPassword", "newPassword"],
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password",
            "description": "Current password"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "description": "New password",
            "minLength": 8
          }
        }
      },
      "HealthStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Overall health status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Health check timestamp"
          },
          "uptime": {
            "type": "number",
            "description": "Service uptime in seconds"
          },
          "memory": {
            "type": "object",
            "properties": {
              "used": {
                "type": "number",
                "description": "Memory used in bytes"
              },
              "total": {
                "type": "number",
                "description": "Total memory in bytes"
              }
            }
          },
          "version": {
            "type": "string",
            "description": "API version"
          },
          "environment": {
            "type": "string",
            "description": "Current environment"
          },
          "database": {
            "type": "object",
            "properties": {
              "connected": {
                "type": "boolean",
                "description": "Database connection status"
              },
              "latency": {
                "type": "number",
                "description": "Database latency in milliseconds"
              }
            }
          }
        }
      },
      "DetailedHealthStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "uptime": {
            "type": "number"
          },
          "version": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "checks": {
            "type": "object",
            "properties": {
              "database": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "latency": {
                    "type": "number"
                  }
                }
              },
              "memory": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "usage": {
                    "type": "number"
                  }
                }
              },
              "services": {
                "type": "object"
              }
            }
          }
        }
      },
      "ServicesHealthStatus": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHealth"
            }
          },
          "summary": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "healthy": {
                "type": "integer"
              },
              "unhealthy": {
                "type": "integer"
              }
            }
          }
        }
      },
      "ServiceHealth": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy", "unknown"]
          },
          "endpoint": {
            "type": "string",
            "format": "uri"
          },
          "responseTime": {
            "type": "number",
            "description": "Response time in milliseconds"
          },
          "cpuUsage": {
            "type": "number",
            "description": "CPU usage percentage"
          },
          "memoryUsage": {
            "type": "number",
            "description": "Memory usage percentage"
          },
          "lastChecked": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "string",
            "description": "Error message if unhealthy"
          }
        }
      },
      "Tenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended", "cancelled"]
          },
          "tier": {
            "type": "string",
            "enum": ["free", "basic", "pro", "enterprise"]
          },
          "api_key": {
            "type": "string",
            "description": "Tenant API key (only shown on creation)"
          },
          "settings": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TenantListResponse": {
        "type": "object",
        "properties": {
          "tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "TenantDetailResponse": {
        "type": "object",
        "properties": {
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        }
      },
      "TenantResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        }
      },
      "CreateTenantRequest": {
        "type": "object",
        "required": ["name", "tier"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tenant organization name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Primary contact email"
          },
          "tier": {
            "type": "string",
            "enum": ["free", "basic", "pro", "enterprise"],
            "description": "Subscription tier"
          },
          "settings": {
            "type": "object",
            "description": "Tenant-specific settings"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata"
          }
        }
      },
      "UpdateTenantRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tier": {
            "type": "string",
            "enum": ["free", "basic", "pro", "enterprise"]
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended", "cancelled"]
          },
          "settings": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "TenantStatsResponse": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string",
            "format": "uuid"
          },
          "stats": {
            "type": "object",
            "properties": {
              "api_calls": {
                "type": "integer"
              },
              "storage_used": {
                "type": "integer"
              },
              "users_count": {
                "type": "integer"
              },
              "applications_count": {
                "type": "integer"
              }
            }
          },
          "last_updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["core", "microservice", "external"]
          },
          "endpoint": {
            "type": "string",
            "format": "uri"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "maintenance"]
          },
          "metadata": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ServiceListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Service"
                }
              },
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              }
            }
          }
        }
      },
      "ServiceResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "RegisterServiceRequest": {
        "type": "object",
        "required": ["name", "endpoint"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name"
          },
          "endpoint": {
            "type": "string",
            "format": "uri",
            "description": "Service endpoint URL"
          },
          "metadata": {
            "type": "object",
            "description": "Additional service metadata"
          }
        }
      },
      "UpdateServiceRequest": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "format": "uri"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "SyncResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHealth"
            }
          },
          "summary": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "healthy": {
                "type": "integer"
              },
              "unhealthy": {
                "type": "integer"
              }
            }
          }
        }
      },
      "ServicesStatsResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "services": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "requests": {
                  "type": "integer"
                },
                "errors": {
                  "type": "integer"
                },
                "avgResponseTime": {
                  "type": "number"
                }
              }
            }
          },
          "performance": {
            "type": "object",
            "properties": {
              "totalRequests": {
                "type": "integer"
              },
              "avgResponseTime": {
                "type": "number"
              },
              "successRate": {
                "type": "number"
              }
            }
          },
          "errors": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "byService": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "DashboardStatsResponse": {
        "type": "object",
        "properties": {
          "stats": {
            "type": "object",
            "properties": {
              "tenants": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  },
                  "active": {
                    "type": "integer"
                  },
                  "new": {
                    "type": "integer"
                  }
                }
              },
              "services": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  },
                  "healthy": {
                    "type": "integer"
                  },
                  "issues": {
                    "type": "integer"
                  }
                }
              },
              "system": {
                "type": "object",
                "properties": {
                  "cpuUsage": {
                    "type": "number"
                  },
                  "memoryUsage": {
                    "type": "number"
                  },
                  "uptime": {
                    "type": "number"
                  }
                }
              },
              "activity": {
                "type": "object",
                "properties": {
                  "apiCalls": {
                    "type": "integer"
                  },
                  "errors": {
                    "type": "integer"
                  },
                  "avgResponseTime": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "period": {
            "type": "string"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["info", "warning", "error", "success"]
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NotificationsResponse": {
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string",
            "format": "uuid"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid"
          },
          "details": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ActivityLogResponse": {
        "type": "object",
        "properties": {
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "any"
          },
          "description": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SystemConfigResponse": {
        "type": "object",
        "properties": {
          "config": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemConfig"
            }
          }
        }
      },
      "UpdateSystemConfigRequest": {
        "type": "object",
        "required": ["key", "value"],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "any"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Admin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["superadmin", "admin"]
          },
          "status": {
            "type": "string",
            "enum": ["active", "suspended"]
          },
          "tenant_access": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "permissions": {
            "type": "object"
          },
          "client_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AdminListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Admin"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "AdminDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Admin"
          }
        }
      },
      "AdminResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Admin"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreateAdminRequest": {
        "type": "object",
        "required": ["email", "password", "username"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8
          },
          "username": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["superadmin", "admin"],
            "default": "admin"
          },
          "status": {
            "type": "string",
            "enum": ["active", "suspended"],
            "default": "active"
          },
          "tenant_access": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "permissions": {
            "type": "object"
          },
          "client_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateAdminRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["superadmin", "admin"]
          },
          "status": {
            "type": "string",
            "enum": ["active", "suspended"]
          },
          "tenant_access": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "permissions": {
            "type": "object"
          },
          "client_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["web", "mobile", "desktop", "api"]
            }
          },
          "status": {
            "type": "string",
            "enum": ["development", "testing", "production", "deprecated"]
          },
          "version": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "client_id": {
            "type": "string",
            "format": "uuid"
          },
          "client_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApplicationListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "ApplicationDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Application"
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Application"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreateApplicationRequest": {
        "type": "object",
        "required": ["name", "description", "platforms"],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["web", "mobile", "desktop", "api"]
            }
          },
          "status": {
            "type": "string",
            "enum": ["development", "testing", "production", "deprecated"],
            "default": "development"
          },
          "version": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "clientId": {
            "type": "string",
            "format": "uuid"
          },
          "clientName": {
            "type": "string"
          }
        }
      },
      "UpdateApplicationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["web", "mobile", "desktop", "api"]
            }
          },
          "status": {
            "type": "string",
            "enum": ["development", "testing", "production", "deprecated"]
          },
          "version": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "Client": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "primaryContact": {
            "type": "string"
          },
          "contractType": {
            "type": "string",
            "enum": ["monthly", "annual", "project-based", "enterprise"]
          },
          "contractValue": {
            "type": "number"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"]
          },
          "notes": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ClientListResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client"
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "ClientDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Client"
          }
        }
      },
      "ClientResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Client"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreateClientRequest": {
        "type": "object",
        "required": ["name", "industry", "contactEmail"],
        "properties": {
          "name": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "primaryContact": {
            "type": "string"
          },
          "contractType": {
            "type": "string",
            "enum": ["monthly", "annual", "project-based", "enterprise"]
          },
          "contractValue": {
            "type": "number"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "default": "active"
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "UpdateClientRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "format": "uri"
          },
          "primaryContact": {
            "type": "string"
          },
          "contractType": {
            "type": "string",
            "enum": ["monthly", "annual", "project-based", "enterprise"]
          },
          "contractValue": {
            "type": "number"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"]
          },
          "notes": {
            "type": "string"
          }
        }
      }
    }
  }
}